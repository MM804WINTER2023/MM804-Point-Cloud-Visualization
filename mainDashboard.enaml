from __future__ import print_function
from enaml.layout.api import vbox, hbox, spacer, align
from enaml.widgets.api import (
    Window, Container, GroupBox, Form, Label, Field, CheckBox, ComboBox,
    MultilineField, PushButton, VTKCanvas, PopupView, Menu, FileDialogEx
)
import os
import sys
from table_view import inputPath, itemNames
import shutil


from pcd2Vtk import vtkPCDLoader

import vtk

# Taking the incoming path variable and store it as a global variable 
path=inputPath
# The code will select the first .pcd file in the directory and loaded in the PCDLoader
fileNumSelection = 0


renderers, new_path = vtkPCDLoader(path, fileNumSelection, itemNames)

def discardObj (file_name, path):
    # Set the file name and the path to the discard folder
    discard_folder = './discard'

    # Create the discard folder if it doesn't already exist
    if not os.path.exists(discard_folder):
        os.makedirs(discard_folder)

    # Set the paths to the original file and the copy in the discard folder
    original_path = new_path
    discard_path = discard_folder + '/' + file_name + "_discard.pcd"

    # Copy the file to the discard folder
    shutil.copy2(original_path, discard_path)
# Pop menu for information buttion onClick Event
enamldef PopupMenu(Menu):
    GroupBox: grpBoxInformation:
        GroupBox: grpBoxRotateInstrution:
            Label:
                text = 'Rotate Object'
                align = 'left'
            Label:
                text = 'Please hold Mouse to rotate the object'
                align = 'center'
        GroupBox: grpBoxZoomInstrution:
            Label:
                text = 'Zoom in/out Object'
                align = 'left'
            Label:
                text = 'Please use Mouse Roller to Zoom in/ out'
                align = 'center'
# Define the onClick event of discard button being clicked 
enamldef DiscardMenu(Menu):
    GroupBox: grpBoxInformation:
        GroupBox: grpBoxRotateInstrution:
            Label:
                text = 'If you discard the current object, it will be copied and store in /discard folder'
                align = 'left'
            PushButton: settings:
                text << 'Confirm to Discard the current object'
                clicked :: discardObj(itemNames, path)
            
                

enamldef Main(Window):
    
    title = "Point Cloud VTK Viewer"
    attr mdi_visible = True
    Container:
        constraints = [
            # Set the constraint width for the four window views
            grpBoxTitle.width == 900,
            grpBoxTop.width == 0.488 * width,
            grpBoxBtnGrp.height == grpBoxTitle.height,
            grpBoxBtnGrp2.width == grpBoxBtnGrp.width, 
            grpBoxOverview.height == 320, 
            grpBoxTop.height == grpBoxOverview.height,
            grpBoxSide.height == grpBoxOverview.height, 
            grpBoxTop.width == grpBoxSide.width,

            vbox(hbox(grpBoxTitle, grpBoxBtnGrp, grpBoxBtnGrp2), 
            vbox(
                hbox(grpBoxMedian),
            ),
            vbox(
                hbox(grpBoxTop,grpBoxSide),
                hbox(grpBoxOverview),
            ), 
            ), 
        ]
        GroupBox: grpBoxTitle:
            Label: appTitle: 
                text = 'Exploring the selected Annotated Object: ' + new_path
        
        GroupBox: grpBoxBtnGrp:
            PushButton: information:
                text << 'Information'
                clicked :: PopupMenu().popup()

        GroupBox: grpBoxBtnGrp2:
            PushButton: settings:
                text << 'Discard the current object'
                clicked :: DiscardMenu().popup()

        GroupBox: grpBoxMedian:
            Label: appMedian: 
                text = 'Annotated Object Centroid: ' + str(renderers[0].GetActiveCamera().GetPosition())
        # Using VTK Canvas for displaying VTK Objects in Enaml 
        GroupBox: grpBoxSide:
            title << "Side View" 
            VTKCanvas:
                renderer = renderers[1]
        GroupBox: grpBoxOverview:
            title << "360 View" 
            VTKCanvas:
                renderer = renderers[0]
        GroupBox: grpBoxTop:
            title << "Top View" 
            VTKCanvas:
                renderer = renderers[2]
            



        