import os
import time
import random
import datetime
from threading import Thread
from ipywidgets import Button
from atom.api import (Atom, Str, Range, ContainerList, Bool)
from enaml.widgets.api import *
from enamlx.widgets.table_view import (
    TableView, TableViewRow, TableViewItem
)

from enaml.widgets.api import (
    Window, Container, PushButton, CheckBox, RadioButton
)
from enaml.core.looper import Looper
from enaml.widgets.spin_box import SpinBox
from enaml.image import Image
from enaml.application import deferred_call
from enaml.widgets.menu import Menu
from enaml.widgets.action import Action
from enamlx.core.looper import ListLooper

import enaml

count = 0 

class PcdFile(Atom):
    date = Str()

    dateSet = Str()

    file_path = Str()

    debug = Bool(False)

    def __repr__(self, *args, **kwargs):
        return "PcdFile(dateSet={p.dateSet},date={p.date})".format(p=self)

def readFiles():
    defaultPath = "./Dataset/assets/hydro.tel"
    files = os.listdir(defaultPath)
    #file_info = {}
    pcdList = []
    global count
    for file in files:
        print (file)
        file_path = os.path.join(defaultPath, file)
        name = file
        date = os.path.getmtime(file_path)
        mod_time_str = datetime.datetime.fromtimestamp(date).strftime('%Y-%m-%d %H:%M:%S')
        #file_info[name] = mod_time_str
        newPcd = PcdFile(date = mod_time_str, dateSet = name, file_path = file_path)
        pcdList.append (newPcd)
        count += 1
        
    return pcdList

class TableModel(Atom):
    files = ContainerList(PcdFile)

data_model = TableModel(files=
    readFiles()
)

def open_new_window(path):
    with enaml.imports():
        from mainDashboard import Main
    print (path)
    window = Main()
    window.show()





enamldef TableStart(Window):
    attr model = data_model
    Container:
        Label:
            text = "Welcome to VTK Point Cloud Viewer, Please choose your PCD object from List below"
            font = {'size': 24, 'weight': 'bold'}
            align =  'center'

        TableView: table:
            minimum_size = (800,420)
            horizontal_headers << ['Annotated Object','Dataset','Date','Explore Dataset']
            horizontal_stretch = True
            items << model.files

            Looper:
                iterable << range(count)  # update to show 10 rows
                TableViewRow:
                    row << table.visible_row+loop_index
                    attr pcdFile << table.items[self.row]

                    Menu:
                        Action:
                            text << 'Row {} menu'.format(table.visible_row+loop_index)

                    TableViewItem:
                        text := pcdFile.dateSet
                        selectable = False

                    TableViewItem:
                        text := pcdFile.file_path
                        selectable = False
                        Menu:
                            Action:
                                text << 'Edit {} menu'.format(pcdFile.dateSet)
                    TableViewItem:
                        text << pcdFile.date
                        selectable = False
                    TableViewItem:
                        PushButton:
                            text << 'Explore'
                            clicked :: open_new_window(pcdFile.file_path)